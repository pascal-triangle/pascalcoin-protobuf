/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

goog.exportSymbol('Block', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Block.displayName = 'proto.Block';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encPubkey: msg.getEncPubkey_asB64(),
    reward: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ver: jspb.Message.getFieldWithDefault(msg, 5, 0),
    verA: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    target: jspb.Message.getFieldWithDefault(msg, 8, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 9, 0),
    payload: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sbh: msg.getSbh_asB64(),
    oph: msg.getOph_asB64(),
    pow: msg.getPow_asB64(),
    hashratekhs: jspb.Message.getFieldWithDefault(msg, 14, 0),
    maturation: jspb.Message.getFieldWithDefault(msg, 15, 0),
    operations: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReward(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVerA(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTarget(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSbh(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOph(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPow(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHashratekhs(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaturation(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEncPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReward();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVer();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getVerA();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSbh_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getOph_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getPow_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getHashratekhs();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getMaturation();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getOperations();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
};


/**
 * optional uint32 block = 1;
 * @return {number}
 */
proto.Block.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Block.prototype.setBlock = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes enc_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Block.prototype.getEncPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes enc_pubkey = 2;
 * This is a type-conversion wrapper around `getEncPubkey()`
 * @return {string}
 */
proto.Block.prototype.getEncPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncPubkey()));
};


/**
 * optional bytes enc_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncPubkey()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getEncPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setEncPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string reward = 3;
 * @return {string}
 */
proto.Block.prototype.getReward = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Block.prototype.setReward = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fee = 4;
 * @return {string}
 */
proto.Block.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Block.prototype.setFee = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 ver = 5;
 * @return {number}
 */
proto.Block.prototype.getVer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Block.prototype.setVer = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 ver_a = 6;
 * @return {number}
 */
proto.Block.prototype.getVerA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Block.prototype.setVerA = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 timestamp = 7;
 * @return {number}
 */
proto.Block.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Block.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 target = 8;
 * @return {number}
 */
proto.Block.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Block.prototype.setTarget = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 nonce = 9;
 * @return {number}
 */
proto.Block.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Block.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string payload = 10;
 * @return {string}
 */
proto.Block.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Block.prototype.setPayload = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes sbh = 11;
 * @return {!(string|Uint8Array)}
 */
proto.Block.prototype.getSbh = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes sbh = 11;
 * This is a type-conversion wrapper around `getSbh()`
 * @return {string}
 */
proto.Block.prototype.getSbh_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSbh()));
};


/**
 * optional bytes sbh = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSbh()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getSbh_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSbh()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setSbh = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes oph = 12;
 * @return {!(string|Uint8Array)}
 */
proto.Block.prototype.getOph = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes oph = 12;
 * This is a type-conversion wrapper around `getOph()`
 * @return {string}
 */
proto.Block.prototype.getOph_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOph()));
};


/**
 * optional bytes oph = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOph()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getOph_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOph()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setOph = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes pow = 13;
 * @return {!(string|Uint8Array)}
 */
proto.Block.prototype.getPow = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes pow = 13;
 * This is a type-conversion wrapper around `getPow()`
 * @return {string}
 */
proto.Block.prototype.getPow_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPow()));
};


/**
 * optional bytes pow = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPow()`
 * @return {!Uint8Array}
 */
proto.Block.prototype.getPow_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPow()));
};


/** @param {!(string|Uint8Array)} value */
proto.Block.prototype.setPow = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional uint32 hashratekhs = 14;
 * @return {number}
 */
proto.Block.prototype.getHashratekhs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Block.prototype.setHashratekhs = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 maturation = 15;
 * @return {number}
 */
proto.Block.prototype.getMaturation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Block.prototype.setMaturation = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 operations = 16;
 * @return {number}
 */
proto.Block.prototype.getOperations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.Block.prototype.setOperations = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


goog.object.extend(exports, proto);
