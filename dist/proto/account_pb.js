/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

goog.exportSymbol('Account', null, proto);
goog.exportSymbol('Account.State', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Account.displayName = 'proto.Account';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encPubkey: msg.getEncPubkey_asB64(),
    balance: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nOperation: jspb.Message.getFieldWithDefault(msg, 4, 0),
    updatedB: jspb.Message.getFieldWithDefault(msg, 5, 0),
    state: jspb.Message.getFieldWithDefault(msg, 6, 0),
    name: jspb.Message.getFieldWithDefault(msg, 7, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    lockedUntilBlock: jspb.Message.getFieldWithDefault(msg, 9, 0),
    price: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sellerAccount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    privateSale: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    newEncPubkey: msg.getNewEncPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Account;
  return proto.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Account}
 */
proto.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNOperation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdatedB(value);
      break;
    case 6:
      var value = /** @type {!proto.Account.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockedUntilBlock(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSellerAccount(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrivateSale(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewEncPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEncPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNOperation();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUpdatedB();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getLockedUntilBlock();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSellerAccount();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getPrivateSale();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getNewEncPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Account.State = {
  NORMAL: 0,
  LISTED: 1
};

/**
 * optional uint32 account = 1;
 * @return {number}
 */
proto.Account.prototype.getAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Account.prototype.setAccount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes enc_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Account.prototype.getEncPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes enc_pubkey = 2;
 * This is a type-conversion wrapper around `getEncPubkey()`
 * @return {string}
 */
proto.Account.prototype.getEncPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncPubkey()));
};


/**
 * optional bytes enc_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncPubkey()`
 * @return {!Uint8Array}
 */
proto.Account.prototype.getEncPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Account.prototype.setEncPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string balance = 3;
 * @return {string}
 */
proto.Account.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Account.prototype.setBalance = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 n_operation = 4;
 * @return {number}
 */
proto.Account.prototype.getNOperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Account.prototype.setNOperation = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 updated_b = 5;
 * @return {number}
 */
proto.Account.prototype.getUpdatedB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Account.prototype.setUpdatedB = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional State state = 6;
 * @return {!proto.Account.State}
 */
proto.Account.prototype.getState = function() {
  return /** @type {!proto.Account.State} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.Account.State} value */
proto.Account.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string name = 7;
 * @return {string}
 */
proto.Account.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Account.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 type = 8;
 * @return {number}
 */
proto.Account.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Account.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 locked_until_block = 9;
 * @return {number}
 */
proto.Account.prototype.getLockedUntilBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Account.prototype.setLockedUntilBlock = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string price = 10;
 * @return {string}
 */
proto.Account.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Account.prototype.setPrice = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint32 seller_account = 11;
 * @return {number}
 */
proto.Account.prototype.getSellerAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Account.prototype.setSellerAccount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bool private_sale = 12;
 * @return {boolean}
 */
proto.Account.prototype.getPrivateSale = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.Account.prototype.setPrivateSale = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bytes new_enc_pubkey = 13;
 * @return {!(string|Uint8Array)}
 */
proto.Account.prototype.getNewEncPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes new_enc_pubkey = 13;
 * This is a type-conversion wrapper around `getNewEncPubkey()`
 * @return {string}
 */
proto.Account.prototype.getNewEncPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewEncPubkey()));
};


/**
 * optional bytes new_enc_pubkey = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewEncPubkey()`
 * @return {!Uint8Array}
 */
proto.Account.prototype.getNewEncPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewEncPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.Account.prototype.setNewEncPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


goog.object.extend(exports, proto);
