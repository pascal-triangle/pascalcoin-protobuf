/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

var changers_pb = require('./changers_pb.js');
goog.object.extend(proto, changers_pb);
var senders_pb = require('./senders_pb.js');
goog.object.extend(proto, senders_pb);
var receivers_pb = require('./receivers_pb.js');
goog.object.extend(proto, receivers_pb);
goog.exportSymbol('Operation', null, proto);
goog.exportSymbol('Operation.Optype', null, proto);
goog.exportSymbol('Operation.Subtype', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Operation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Operation.repeatedFields_, null);
};
goog.inherits(proto.Operation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Operation.displayName = 'proto.Operation';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Operation.repeatedFields_ = [21,22,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Operation.prototype.toObject = function(opt_includeInstance) {
  return proto.Operation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Operation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operation.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errors: jspb.Message.getFieldWithDefault(msg, 2, ""),
    block: jspb.Message.getFieldWithDefault(msg, 3, 0),
    time: jspb.Message.getFieldWithDefault(msg, 4, 0),
    opblock: jspb.Message.getFieldWithDefault(msg, 5, 0),
    payload: msg.getPayload_asB64(),
    maturation: jspb.Message.getFieldWithDefault(msg, 7, 0),
    optype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    account: jspb.Message.getFieldWithDefault(msg, 9, 0),
    optxt: jspb.Message.getFieldWithDefault(msg, 10, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 11, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 12, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 13, ""),
    ophash: msg.getOphash_asB64(),
    oldOphash: msg.getOldOphash_asB64(),
    subtype: jspb.Message.getFieldWithDefault(msg, 16, 0),
    signerAccount: jspb.Message.getFieldWithDefault(msg, 17, 0),
    senderAccount: jspb.Message.getFieldWithDefault(msg, 18, 0),
    destAccount: jspb.Message.getFieldWithDefault(msg, 19, 0),
    nOperation: jspb.Message.getFieldWithDefault(msg, 20, 0),
    changersList: jspb.Message.toObjectList(msg.getChangersList(),
    changers_pb.Changers.toObject, includeInstance),
    sendersList: jspb.Message.toObjectList(msg.getSendersList(),
    senders_pb.Senders.toObject, includeInstance),
    receiversList: jspb.Message.toObjectList(msg.getReceiversList(),
    receivers_pb.Receivers.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Operation;
  return proto.Operation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Operation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Operation}
 */
proto.Operation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrors(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOpblock(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaturation(value);
      break;
    case 8:
      var value = /** @type {!proto.Operation.Optype} */ (reader.readEnum());
      msg.setOptype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptxt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOphash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOldOphash(value);
      break;
    case 16:
      var value = /** @type {!proto.Operation.Subtype} */ (reader.readEnum());
      msg.setSubtype(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignerAccount(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSenderAccount(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDestAccount(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNOperation(value);
      break;
    case 21:
      var value = new changers_pb.Changers;
      reader.readMessage(value,changers_pb.Changers.deserializeBinaryFromReader);
      msg.addChangers(value);
      break;
    case 22:
      var value = new senders_pb.Senders;
      reader.readMessage(value,senders_pb.Senders.deserializeBinaryFromReader);
      msg.addSenders(value);
      break;
    case 23:
      var value = new receivers_pb.Receivers;
      reader.readMessage(value,receivers_pb.Receivers.deserializeBinaryFromReader);
      msg.addReceivers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Operation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Operation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Operation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Operation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrors();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlock();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOpblock();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMaturation();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getOptype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAccount();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getOptxt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOphash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getOldOphash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getSubtype();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getSignerAccount();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getSenderAccount();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getDestAccount();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getNOperation();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getChangersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      changers_pb.Changers.serializeBinaryToWriter
    );
  }
  f = message.getSendersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      senders_pb.Senders.serializeBinaryToWriter
    );
  }
  f = message.getReceiversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      receivers_pb.Receivers.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Operation.Optype = {
  BLOCKCHAIN_REWARD: 0,
  TRANSACTION: 1,
  CHANGE_KEY: 2,
  RECOVER_FUNDS: 3,
  LIST_FOR_SALE: 4,
  DELIST: 5,
  BUY: 6,
  CHANGE_KEY_ACCOUNT: 7,
  CHANGE_ACCOUNT_INFO: 8,
  MULTI_OPERATION: 9,
  DATA: 10
};

/**
 * @enum {number}
 */
proto.Operation.Subtype = {
  SUBTYPE_NONE: 0,
  SUBTYPE_MINER: 1,
  SUBTYPE_DEVELOPER: 2,
  SUBTYPE_TX_SENDER: 11,
  SUBTYPE_TX_RECEIVER: 12,
  SUBTYPE_TX_BUY_BUYER: 13,
  SUBTYPE_TX_BUY_TARGET: 14,
  SUBTYPE_TX_BUY_SELLER: 15,
  SUBTYPE_CHANGE_KEY: 21,
  SUBTYPE_RECOVER: 31,
  SUBTYPE_LIST_PUBLIC: 41,
  SUBTYPE_LIST_PRIVATE: 42,
  SUBTYPE_DELIST: 51,
  SUBTYPE_BUY_BUYER: 61,
  SUBTYPE_BUY_TARGET: 62,
  SUBTYPE_BUY_SELLER: 63,
  SUBTYPE_CHANGE_KEY_SIGNED: 71,
  SUBTYPE_CHANGE_ACCOUNT_INFO: 81,
  SUBTYPE_MULTI_GLOBAL: 91,
  SUBTYPE_MULTI_ACCOUNT_INFO: 92,
  SUBTYPE_DATA_GLOBAL: 101,
  SUBTYPE_DATA_SENDER: 102,
  SUBTYPE_DATA_SIGNER: 103,
  SUBTYPE_DATA_RECEIVER: 104
};

/**
 * optional bool valid = 1;
 * @return {boolean}
 */
proto.Operation.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.Operation.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string errors = 2;
 * @return {string}
 */
proto.Operation.prototype.getErrors = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Operation.prototype.setErrors = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 block = 3;
 * @return {number}
 */
proto.Operation.prototype.getBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Operation.prototype.setBlock = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 time = 4;
 * @return {number}
 */
proto.Operation.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Operation.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 opblock = 5;
 * @return {number}
 */
proto.Operation.prototype.getOpblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Operation.prototype.setOpblock = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes payload = 6;
 * @return {!(string|Uint8Array)}
 */
proto.Operation.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes payload = 6;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.Operation.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.Operation.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.Operation.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 maturation = 7;
 * @return {number}
 */
proto.Operation.prototype.getMaturation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Operation.prototype.setMaturation = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional Optype optype = 8;
 * @return {!proto.Operation.Optype}
 */
proto.Operation.prototype.getOptype = function() {
  return /** @type {!proto.Operation.Optype} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Operation.Optype} value */
proto.Operation.prototype.setOptype = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional uint32 account = 9;
 * @return {number}
 */
proto.Operation.prototype.getAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.Operation.prototype.setAccount = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string optxt = 10;
 * @return {string}
 */
proto.Operation.prototype.getOptxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Operation.prototype.setOptxt = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string amount = 11;
 * @return {string}
 */
proto.Operation.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Operation.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string fee = 12;
 * @return {string}
 */
proto.Operation.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Operation.prototype.setFee = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string balance = 13;
 * @return {string}
 */
proto.Operation.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Operation.prototype.setBalance = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bytes ophash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.Operation.prototype.getOphash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes ophash = 14;
 * This is a type-conversion wrapper around `getOphash()`
 * @return {string}
 */
proto.Operation.prototype.getOphash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOphash()));
};


/**
 * optional bytes ophash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOphash()`
 * @return {!Uint8Array}
 */
proto.Operation.prototype.getOphash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOphash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Operation.prototype.setOphash = function(value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes old_ophash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.Operation.prototype.getOldOphash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes old_ophash = 15;
 * This is a type-conversion wrapper around `getOldOphash()`
 * @return {string}
 */
proto.Operation.prototype.getOldOphash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOldOphash()));
};


/**
 * optional bytes old_ophash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOldOphash()`
 * @return {!Uint8Array}
 */
proto.Operation.prototype.getOldOphash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOldOphash()));
};


/** @param {!(string|Uint8Array)} value */
proto.Operation.prototype.setOldOphash = function(value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional Subtype subtype = 16;
 * @return {!proto.Operation.Subtype}
 */
proto.Operation.prototype.getSubtype = function() {
  return /** @type {!proto.Operation.Subtype} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.Operation.Subtype} value */
proto.Operation.prototype.setSubtype = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional uint32 signer_account = 17;
 * @return {number}
 */
proto.Operation.prototype.getSignerAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Operation.prototype.setSignerAccount = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 sender_account = 18;
 * @return {number}
 */
proto.Operation.prototype.getSenderAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Operation.prototype.setSenderAccount = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 dest_account = 19;
 * @return {number}
 */
proto.Operation.prototype.getDestAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.Operation.prototype.setDestAccount = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional uint32 n_operation = 20;
 * @return {number}
 */
proto.Operation.prototype.getNOperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.Operation.prototype.setNOperation = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * repeated Changers changers = 21;
 * @return {!Array<!proto.Changers>}
 */
proto.Operation.prototype.getChangersList = function() {
  return /** @type{!Array<!proto.Changers>} */ (
    jspb.Message.getRepeatedWrapperField(this, changers_pb.Changers, 21));
};


/** @param {!Array<!proto.Changers>} value */
proto.Operation.prototype.setChangersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.Changers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Changers}
 */
proto.Operation.prototype.addChangers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.Changers, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Operation.prototype.clearChangersList = function() {
  this.setChangersList([]);
};


/**
 * repeated Senders senders = 22;
 * @return {!Array<!proto.Senders>}
 */
proto.Operation.prototype.getSendersList = function() {
  return /** @type{!Array<!proto.Senders>} */ (
    jspb.Message.getRepeatedWrapperField(this, senders_pb.Senders, 22));
};


/** @param {!Array<!proto.Senders>} value */
proto.Operation.prototype.setSendersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.Senders=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Senders}
 */
proto.Operation.prototype.addSenders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.Senders, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Operation.prototype.clearSendersList = function() {
  this.setSendersList([]);
};


/**
 * repeated Receivers receivers = 23;
 * @return {!Array<!proto.Receivers>}
 */
proto.Operation.prototype.getReceiversList = function() {
  return /** @type{!Array<!proto.Receivers>} */ (
    jspb.Message.getRepeatedWrapperField(this, receivers_pb.Receivers, 23));
};


/** @param {!Array<!proto.Receivers>} value */
proto.Operation.prototype.setReceiversList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.Receivers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Receivers}
 */
proto.Operation.prototype.addReceivers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.Receivers, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.Operation.prototype.clearReceiversList = function() {
  this.setReceiversList([]);
};


goog.object.extend(exports, proto);
